# This file is distributed under the BSD 3-Clause License. See LICENSE for details.

load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//tools:copt_default.bzl", "COPTS")
load("@rules_rust//rust:defs.bzl", 
	"rust_binary",
	"rust_library",
	"rust_test"
)
load("@rules_rust_bindgen//:defs.bzl",
	"rust_bindgen_library",
)

exports_files(["rust"])
exports_files(["tree.hpp"])
exports_files(["wrapper.hpp"])

config_setting(
    name = "use_profiling",
    values = {"define": "profiling=1"},
)

cc_library(
    name = "rigtorp",
    hdrs = glob(["tests/*.hpp"]),
    copts = COPTS,
    includes = ["."],
    visibility = ["//visibility:public"],
)


cc_library(
    name = "iassert",
    hdrs = ["iassert.hpp"],
    includes = ["."],
    visibility = ["//visibility:public"],
    include_prefix = "iassert",
    linkstatic =True,
)

cc_library(
    name = "core",
    srcs = glob(
	["tree.cpp", "wrapper.cpp"],
        exclude = ["*test*.cpp"],
    ),
    hdrs = glob(["tree.hpp", "lhtree.hpp", "wrapper.hpp"]),
    copts = COPTS,
    defines = select({
        ":use_profiling": [
            "HHDS_PROFILING=1",
        ],
        "//conditions:default": [],
    }),
    includes = ["."],
    visibility = ["//visibility:public"],
    deps = [
        "@fmt",
	"@iassert//:iassert",
        "@emhash",
    ] + select({
        ":use_profiling": [
            "@com_google_perfetto//:perfetto",
        ],
        "//conditions:default": [],
    }),
)

cc_library(
    name    = "graph",
    srcs    = ["graph.cpp"],
    hdrs    = [
      "graph.hpp",
      "graph_sizing.hpp",
      "hash_set3.hpp",
      "unordered_dense.hpp",
    ],
    copts   = COPTS + [
        "-Wno-unused-parameter",
        "-Wno-unused-variable",
        "-Wno-shadow",
        "-Wno-self-assign",
        "-Wno-unused-private-field",
    ],
    includes = ["."],
    deps    = [
        "@emhash//:emhash",
    ],
    visibility = ["//visibility:public"],
)

cc_test(
    name = "add_append_deep_bench",
    srcs = ["tests/add_append_bench/deep_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_deep_bench",
    srcs = ["tests/traversal_bench/preorder_bench/deep_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_wide_bench",
    srcs = ["tests/traversal_bench/preorder_bench/wide_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_chip_typical_bench",
    srcs = ["tests/traversal_bench/preorder_bench/chip_typical_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "traversal_chip_long_typical_bench",
    srcs = ["tests/traversal_bench/preorder_bench/chip_typical_long_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "build_deep_bench",
    srcs = ["tests/creation_bench/deep_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)
cc_test(
    name = "build_wide_bench",
    srcs = ["tests/creation_bench/wide_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

#TODO: Support representative for github workflow

#cc_test(
#    name = "build_representative_bench",
#    srcs = ["tests/creation_bench/representative_tree_bench.cpp"],
#    deps = [
#        "//tree-sitter:libtree_sitter",
#        "//tree-sitter-cpp:libtree_sitter_cpp",
#        "@google_benchmark//:benchmark",
#        "@googletest//:gtest_main",
#        ":core",
#    ],
#    data = ["wrapper.cpp", "tree.cpp", "SelectionDAG.cpp"],
#includes = [
#"tree-sitter/lib/include/tree_sitter/api.h",
#    "tree-sitter/lib/include",
#    "tree-sitter-cpp/src",
#],
# linkopts = ["-Wl,-rpath, $ORIGIN/tree-sitter-cpp"],
#$ORIGIN/../../../tree-sitter-cpp"],
#)

cc_test(
    name = "add_append_wide_bench",
    srcs = ["tests/add_append_bench/wide_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "add_append_chip_typical_bench",
    srcs = ["tests/add_append_bench/chip_typical_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "add_append_chip_typical_long_bench",
    srcs = ["tests/add_append_bench/chip_typical_long_tree_bench.cpp"],
    deps = [
        "@google_benchmark//:benchmark",
        "@googletest//:gtest_main",
        ":core",
    ],
)

cc_test(
    name = "graph_test",
    srcs = ["tests/graph_test.cpp"],
    deps = [":graph"],
)

cc_test(
    name = "graph_bench",
    srcs = ["tests/graph_bench.cpp"],
    deps = [
      "@abseil-cpp//absl/container:node_hash_set",
      "@abseil-cpp//absl/container:flat_hash_map",
      "@abseil-cpp//absl/container:flat_hash_set",
      "@google_benchmark//:benchmark",
      "@googletest//:gtest_main",
      "@fmt",
      ":graph",
    ],
)

# cc_test(
#     name = "delete_chip_typical_bench",
#     srcs = ["tests/delete_bench/delete_leaf_bench/chip_typical_tree_bench.cpp"],
#     deps = [
#         "@google_benchmark//:benchmark",
#         "@googletest//:gtest_main",
#         ":core",
#     ],
# )

#cc_library(
#    name = "graph_core",
#    srcs = glob(
#        ["graph.cpp"],
#        exclude = ["*graph*.cpp"],
#    ),
#    hdrs = glob(["graph.hpp", "graph_sizing.hpp"]),
#    copts = COPTS,
#    defines = select({
#        ":use_profiling": [
#            "HHDS_PROFILING=1",
#        ],
#        "//conditions:default": [],
#    }),
#    includes = ["."],
#    visibility = ["//visibility:public"],
#    deps = [
#        "@fmt",
#        "@iassert",
#        "@emhash",
#    ] + select({
#        ":use_profiling": [
#            "@com_google_perfetto//:perfetto",
#        ],
#        "//conditions:default": [],
#    }),
#)


#TODO: Support representative for github workflow
#cc_test(
#    name = "traversal_representative_bench",
#    srcs = ["tests/traversal_bench/preorder_bench/representative_tree_bench.cpp"],
#    deps = [
#        "//tree-sitter:libtree_sitter",
#        "//tree-sitter-cpp:libtree_sitter_cpp",
#        "@google_benchmark//:benchmark",
#        "@googletest//:gtest_main",
#        ":core",
#    ],
#    data = ["wrapper.cpp", "tree.cpp", "SelectionDAG.cpp"],
#    includes = [
#	"tree-sitter/lib/include/tree_sitter/api.h",
#        "tree-sitter/lib/include",
#        "tree-sitter-cpp/src",
#    ],
#linkopts = ["-Wl,-rpath,$ORIGIN/../../../tree-sitter-cpp"],
#)


#cc_binary(
#    name = "small_graph_test",
#    srcs = ["tests/small_graph_test.cpp"],
#    deps = [
#        ":graph_core",
#    ],
#)

cc_binary(
    name = "scale_test",
    srcs = ["tests/scale_test.cpp"],
    deps = [
        ":core",
    ],
)
cc_binary(
    name = "deep_tree_correctness",
    srcs = ["tests/deep_tree_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "wide_tree_correctness",
    srcs = ["tests/wide_tree_correctness.cpp"],
    deps = [
        ":core",
    ],
    # copts = ["-DPROFILE"],  # Enable profiling in code
    # linkopts = ["-lprofiler"],
)

cc_binary(
    name = "chip_typical_correctness",
    srcs = ["tests/chip_typical_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "chip_typical_long_correctness",
    srcs = ["tests/chip_typical_long_correctness.cpp"],
    deps = [
        ":core",
    ],
)

cc_binary(
    name = "forest_correctness",
    srcs = ["tests/forest_correctness.cpp"],
    deps = [
        ":core",
    ],
)

# cc_binary(
#     name = "graph_bin",
#     srcs = ["graph_main.cpp"],
#     deps = [":graph_lib"],
# )
